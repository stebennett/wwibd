{"version":3,"sources":["components/ThroughputInput/ThroughputInput.tsx","components/OptionsForm/OptionsForm.tsx","simulate.tsx","components/SimulationResultsTable/SimulationResultsTable.tsx","components/CalculationsOutput/CalculationsOutput.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThroughputInput","addThroughputValue","throughputValues","useState","userThroughputValue","setUserThroughputValue","Row","Col","FloatingLabel","controlId","label","Form","Control","type","value","onChange","e","target","Button","onClick","parseInt","ListGroup","map","item","index","Item","OptionsForm","updateSimulationResults","updateSimulationState","Date","toISOString","split","startDate","setStartDate","min","max","outstandingTasks","setOutstandingTasks","setThroughputValues","throughputPeriod","setThroughputPeriod","Container","onSubmit","event","preventDefault","results","numberOfSamples","minNumOutstandingTasks","maxNumberOutstandingTasks","estimateBetween","Math","floor","random","addDays","input","days","newDate","valueOf","setDate","getDate","buildIterationStats","totalSize","arr","remainingTasks","weekStartDate","iterations","console","log","simulatedThroughputSize","length","tasksRemainingAtEndOfIteration","iteration","weekEndDate","throughput","tasksRemaining","push","allTasksCompleteDate","samples","Array","fill","element","iterationNumber","iterationStats","Simulate","FormGroup","as","Label","Select","tp","prevThroughputValues","variant","SimulationResultsTable","simulationResults","percentile","percent","ceil","sortedSimulationResults","sort","thisResult","otherResult","sortByCompleteDate","Table","striped","bordered","hover","p","toDateString","CalculationsOutput","simulationState","App","setSimulationState","setSimulationResults","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b47a7595.chunk.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { Button, Col, FloatingLabel, Form, ListGroup, Row } from 'react-bootstrap';\n\ninterface ThroughputInputProps {\n    addThroughputValue: any,\n    throughputValues: number[]\n}\n\nconst ThroughputInput:FC<ThroughputInputProps> = ({addThroughputValue, throughputValues}) => {\n\n    const [userThroughputValue, setUserThroughputValue] = useState(\"\");\n\n    const handleAddThroughputValue = () => {\n        addThroughputValue(parseInt(userThroughputValue));\n        setUserThroughputValue(\"\");\n    }\n\n    return (\n        <Row>\n            <p>Throughput</p> \n            <Col>\n                <FloatingLabel controlId=\"throughputInput\" label=\"Throughput\">\n                    <Form.Control type=\"number\" value={ userThroughputValue } onChange={ e => setUserThroughputValue(e.target.value) }/>\n                </FloatingLabel>\n            </Col>\n            <Col>\n                <Button onClick={handleAddThroughputValue}>Add Value</Button>\n            </Col>\n            <Col>\n                <ListGroup>\n                    {throughputValues.map((item, index) => (\n                        <ListGroup.Item key={ index }>{ item }</ListGroup.Item>\n                    ))}\n                </ListGroup>\n            </Col>\n        </Row>\n    )\n}\n\nexport default ThroughputInput;","import React, { FC, useState } from 'react';\nimport { Button, Col, Container, FloatingLabel, Form, FormGroup, ListGroup, Row, Table } from 'react-bootstrap';\nimport { Simulate } from '../../simulate';\nimport ThroughputInput from '../ThroughputInput/ThroughputInput';\n\nimport './OptionsForm.css';\n\ninterface OptionsFormProps {\n    updateSimulationResults: any,\n    updateSimulationState: any,\n}\n\nconst OptionsForm: FC<OptionsFormProps> = ({updateSimulationResults, updateSimulationState}) => {\n\n    const [startDate, setStartDate] = useState(new Date().toISOString().split('T')[0])\n    const [outstandingTasks, setOutstandingTasks] = useState({\n        min: 0,\n        max: 0\n      })\n      const updateMinOutstandingTasks = (min: number) => {\n        setOutstandingTasks({\n          min: min,\n          max: outstandingTasks.max\n        })\n      }\n    \n      const updateMaxOutstandingTasks = (max: number) => {\n        setOutstandingTasks({\n          min: outstandingTasks.min,\n          max: max\n        })\n      }\n\n      const tp: number[] = [];\n      const [throughputValues, setThroughputValues] = useState(tp);\n    \n      const addThroughputValue = (tp: number) => {\n        setThroughputValues((prevThroughputValues) => [\n            ...prevThroughputValues,\n            tp\n          ]\n        )\n      }\n\n      const [throughputPeriod, setThroughputPeriod] = useState(7);\n\n      const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n          event.preventDefault();\n          updateSimulationState('RUNNING');\n          let results = Simulate(500, new Date(startDate), outstandingTasks.min, outstandingTasks.max, throughputValues, throughputPeriod);\n          updateSimulationResults(results);\n          updateSimulationState('COMPLETE');\n      }\n\n\n  return (\n      <Container>\n          <h2>Simulation Options</h2>\n        <Form onSubmit={handleSubmit}>\n            <Row>\n                <FormGroup as={Col} controlId=\"startDate\">\n                    <Form.Label>Start Date</Form.Label>\n                    <Form.Control type=\"date\" onChange={ e => setStartDate(e.target.value) }/>\n                </FormGroup>\n            </Row>\n            <Row>\n                <p>Number of Outstanding Tasks</p>\n                <Col>\n                    <FloatingLabel controlId=\"minNumOutstandingTasks\" label=\"Min\">\n                        <Form.Control type=\"number\" onChange={ e => updateMinOutstandingTasks(parseInt(e.target.value)) }></Form.Control>\n                    </FloatingLabel>\n                </Col>\n                <Col>\n                    <FloatingLabel controlId=\"maxNumOutstandingTasks\" label=\"Max\">\n                        <Form.Control type=\"number\" onChange={ e => updateMaxOutstandingTasks(parseInt(e.target.value)) }></Form.Control>\n                    </FloatingLabel>\n                </Col>\n            </Row>\n            <Row>\n                <FormGroup as={Col} controlId=\"throughputMeasurementPeriod\">\n                    <Form.Label>Throughput Measurement Period</Form.Label>\n                    <Form.Select onChange={ e => setThroughputPeriod(parseInt(e.target.value)) }>\n                        <option value=\"7\">7 days</option>\n                        <option value=\"14\">14 days</option>\n                        <option value=\"21\">21 days</option>\n                        <option value=\"28\">28 days</option>\n                    </Form.Select>\n                </FormGroup>\n            </Row>\n            <ThroughputInput addThroughputValue={addThroughputValue} throughputValues={throughputValues}></ThroughputInput>\n            <Row>\n                <Col>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Col>\n            </Row>\n        </Form>\n      </Container>\n  );\n}\n\nexport default OptionsForm;\n","interface OutstandingTasks {\n    min: number,\n    max: number,\n}\n\ninterface SimulationResult {\n    iterationNumber: number,\n    startDate: Date,\n    totalSize: number,\n    iterationStats: IterationStats,\n}\n\ninterface SimulationResults {\n    startDate: Date,\n    outstandingTasks: OutstandingTasks,\n    throughputValues: number[],\n    samples: number,\n    results: SimulationResult[],\n}\n\ninterface Iteration {\n    weekStartDate: Date,\n    weekEndDate: Date,\n    throughput: number,\n    tasksRemaining: number,\n}\n\ninterface IterationStats {\n    allTasksCompleteDate: Date,\n    iterations: Iteration[],\n}\n\nconst Simulate = (numberOfSamples: number, startDate: Date, minNumOutstandingTasks: number, maxNumberOutstandingTasks: number, throughputValues: number[], throughputPeriod: number): SimulationResults => {\n\n    const estimateBetween = (min: number, max: number) : number => {\n        return Math.floor(Math.random() * (max - min) + min);\n    }\n\n    const pickRandomFromArray = (arr: number[]) : number => {\n        return arr[estimateBetween(0, arr.length - 1)];\n    }\n\n    const addDays = (input: Date, days: number): Date => {\n        let newDate = new Date(input.valueOf());\n        newDate.setDate(input.getDate() + days);\n        return newDate;\n    }\n\n    const buildIterationStats = (startDate: Date, totalSize: number, throughputValues: number[]): IterationStats => {\n        var remainingTasks = totalSize;\n        var weekStartDate = startDate;\n\n        let iterations : Iteration[] = [];\n        console.log(throughputPeriod);\n\n        while(remainingTasks > 0) {\n            let simulatedThroughputSize = pickRandomFromArray(throughputValues);\n            let tasksRemainingAtEndOfIteration = remainingTasks - simulatedThroughputSize > 0 ? remainingTasks - simulatedThroughputSize : 0;\n        \n            let iteration: Iteration = {\n                weekStartDate: weekStartDate,\n                weekEndDate: addDays(weekStartDate, throughputPeriod - 1), // days\n                throughput: simulatedThroughputSize,\n                tasksRemaining: tasksRemainingAtEndOfIteration,  \n            }\n\n            // add it to the stack\n            iterations.push(iteration);\n\n            // set vars for next week\n            remainingTasks = tasksRemainingAtEndOfIteration;    \n            weekStartDate = addDays(weekStartDate, throughputPeriod); // next week\n        }\n\n        return {\n            allTasksCompleteDate: iterations[iterations.length - 1].weekEndDate,\n            iterations: iterations,\n        }\n    }\n\n    return {\n        startDate: startDate,\n        outstandingTasks: {\n            min: minNumOutstandingTasks,\n            max: maxNumberOutstandingTasks\n        },\n        throughputValues: throughputValues,\n        samples: numberOfSamples,\n        results: Array(numberOfSamples).fill({}).map((element, index) => {\n            let totalSize = estimateBetween(minNumOutstandingTasks, maxNumberOutstandingTasks);\n            return {\n                    iterationNumber: index,\n                    startDate: startDate,\n                    totalSize: totalSize,\n                    iterationStats: buildIterationStats(startDate, totalSize, throughputValues),\n                }\n        })\n    }\n\n}\n\nexport { Simulate };\nexport type { OutstandingTasks, SimulationResult, SimulationResults, Iteration, IterationStats };\n","import React, { FC } from 'react';\nimport { Container, Table } from 'react-bootstrap';\nimport { SimulationResult, SimulationResults } from '../../simulate';\n\ninterface SimulationResultsTableProps {\n    simulationResults: SimulationResults\n}\n\nconst SimulationResultsTable:FC<SimulationResultsTableProps> = ({simulationResults}) => {\n\n    const addDays = (input: Date, days: number): Date => {\n        let newDate = new Date(input.valueOf());\n        newDate.setDate(input.getDate() + days);\n        return newDate;\n    }\n\n    const sortByCompleteDate = (simulationResults: SimulationResult[]) : SimulationResult[] => {\n        return [...simulationResults].sort((thisResult: SimulationResult, otherResult: SimulationResult) : number => {\n            return thisResult.iterationStats.allTasksCompleteDate.valueOf() - otherResult.iterationStats.allTasksCompleteDate.valueOf()\n        });\n    }\n\n    const percentile = (simulationResults: SimulationResult[], percent: number): SimulationResult => {\n        var index = Math.ceil( percent / 100.0 * simulationResults.length);\n        index = index < 0 ? 0 : index;\n        return simulationResults[index - 1];\n    }\n\n    const percentiles = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100];\n    const sortedSimulationResults : SimulationResult[] = sortByCompleteDate(simulationResults.results);\n\n    return (\n        <Container>\n            <Table striped bordered hover>\n                <thead>\n                    <th>Likelihood</th>\n                    <th>Date</th>\n                </thead>\n                <tbody>\n                    {percentiles.map((p, index) => (\n                        <tr key={ index }>\n                            <td>{ p }%</td>\n                            <td>{ percentile(sortedSimulationResults, p).iterationStats.allTasksCompleteDate.toDateString() }</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        </Container>\n    )\n        \n}\n\nexport default SimulationResultsTable;","import React, { FC, useState } from 'react';\nimport { SimulationResults } from '../../simulate';\nimport SimulationResultsTable from '../SimulationResultsTable/SimulationResultsTable';\n\ninterface CalculationsOutputProps {\n    simulationResults: SimulationResults,\n    simulationState: string,\n}\n\nconst CalculationsOutput:FC<CalculationsOutputProps> = ({simulationResults, simulationState}) => {\n\n\n    return (\n        <div>\n            <h2>Simulation Results</h2>\n            <p>{ simulationState }</p>\n            { simulationState == 'COMPLETE' && <SimulationResultsTable simulationResults={simulationResults}/> }\n        </div>\n    )\n        \n}\n\nexport default CalculationsOutput;","import './App.css';\nimport OptionsForm from '../OptionsForm/OptionsForm';\nimport CalculationsOutput from '../CalculationsOutput/CalculationsOutput';\nimport { useState } from 'react';\nimport { SimulationResult } from '../../simulate';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nfunction App() {\n\n  const [simulationState, setSimulationState] = useState('DEFAULT');\n\n  const [simulationResults, setSimulationResults] = useState({\n    startDate: new Date(),\n    outstandingTasks: {\n      min: 0,\n      max: 0\n    },\n    throughputValues: [] as number[],\n    samples: 0,\n    results: [] as SimulationResult[]\n  })\n\n  return (\n    <Container className=\"App\">\n      <Row>\n        <Col><OptionsForm updateSimulationResults={setSimulationResults} updateSimulationState={setSimulationState} /></Col>\n        <Col><CalculationsOutput simulationResults={simulationResults} simulationState={simulationState}/></Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}